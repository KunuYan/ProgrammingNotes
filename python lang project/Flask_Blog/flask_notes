______________________________________________________________________
Starting the app:
***** starting the app by using environement variables ---
# before running the app, we need to set an environement variable to the file that will be our app
    export FLASK_APP=<name_of_app_file>.py

# nowe you can start app
    flask run

# to get the server to show changes without restarting, run server in debug mode
    export FLASK_DEBUG=1 

***** starting the app using python
# set an conditional to __main__
    if __name__ == '__main__':
        app.run()  # you can set debug=True

_______________________________________________________________________
Routing:
***** Routing using decorators
# routing in flask is easy, flask will an app.route decorateor to the befunction it decorates
    @app.route('/about')

# the you have a function associated to the route bellow it
    @app.route('/about')
    @app.route('/visit_us') # a func can have be associated to many routes
    def about():
        return '<h1>About Page</h1>'

_______________________________________________________________________
templates:
***** displaying our html content
# when a route is accessed, return a html file
    @app.route('/visit_us') # a func can have be associated to many routes
    def about():
        return render_template('html_file.html') # btw all templates(html files) should be stored in a templates folder

***** accessing our data inside a template
# in order to access data from a db or api inside the template we need to create a variable inside render_template() func, and give that variable data
    return render_template('html_file.html', <name_uwill_useto_callit_intemplate>=<name_ofdata_objectin_mypyfile)
    --- now inside html_file.html you can access the object(wich btw includes functions) from your python process, you will call it <name_uwill_useto_callit_intemplate> instead

# now inside the template use {{}} to access your data
    <p>{{ <name_uwill_useto_callit_intemplate> }}</p>
    --- if your object is collectable(list, dict etc), you can loop, index and use dot notions on them(dict.key)

# writting if and for loops  in templates
    {% for data in dataIaccessed %}
    {% endfor %} # always end code block

    {% if condition%}
    {% else %}
    {% endif%} # always end code block

***** template inheritance
# instead of rewritting the same code over and over, have a base template that other templates will inherit from
# Since most pages looks the same, other templates will just a specific spot that they can change
# the base template should be called layout.html
# to specify where where other templates can overide
    {% block bock_name_of_choice%}{% ednblock %}
    --- the base template can have as many block code as you want

# for other template to inherit from layout.html
    {% extends "layout.html" %}
# then you have to specifie wich block to overide
    {% block block1_name %}
        ...
    {% ednblock %} 
    % block bock2_name %}
        ...
    {% ednblock %}    

***** accesing link in flask
# import url_for from flask in your main python file, you can access url_for in your templete with {{}}
    <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='main.css') }}">
    --- we looked for a main.css file in our static folder, since all css should be located there
    --- it's better access paths like this, since paths can be different based on where the code is ran

_______________________________________________________________________
Working with forms:
***** creating templates using flask-wtf
# when building websites, most of the time you don't have to re-invet the wheel, they are packages that do common stuffs for you
# creating forms(sign up form, login form and etc) is easy with flask-wtf
# btw the forms you make with flaskwtf will be translated from our class objects to html codes that we can pass to atemplates
    pip instal flask-wtf

# Every forms are usually kept in a form.py file so make one then:
    from flask_wtf import FlaskForm
    --- each form(code for a template) you make will inherit from FlaskForm class
    class LoginForm(FlaskForm):
        email = StringField('Email',
                        validators=[DataRequired(), Email()])
        password = PasswordField('Password',
                            validators=[DataRequired()])

    --- and indide each form class we create fields(password box, username box and etc), and save them into variables
    --- check out forms.py for more exemple


# now inside our app.py, we want to give the form to our template when routing the page
    form = NameOfFormClass_FromFormsPyFile()
    return render_template('template.html', form=form)


# now inside the specified templates, inside a form tog(<form>) you can access form data like so:
    {{ form.FieldThatWeWant(class="YouCanPassYourCSSStyleHere") }} # this could be a password box for exemple
    --- basically flaskwtf is a package that writes html for us(called forms) and we pass those forms to our template
    --- Check register.py for reference, explore flaskwtf and other package like it

!!! If your form seems like it's doing nothing, check the encoding in the tenmplates !!
    enctype="multipart/form-data" in your <div> class

 ______________________________________________________________________
 getting user input:
 ***** request.args
 # for getting data url parameters, exemple:
    https://www.youtube.com/watch?reload=9&v=803Ei2Sq-Zs&list=PL-osiE80TeTs4UjLw5MM6OjgkjFeUxCYH&index=7
    value1 = request.args.get('list', '') >> playlist of the video
    we have to create routes for all those args
    
 ***** request.form
# for getting form inputs uses, exemple:
    username = request.form.get('username')
    or
    username = request.form['username']
    check out request documentation to learn more
    
***** Flaskform for flask_wtf module
# for getting form inputs uses, exemple:
    username=form.username.data, email=form.email.data
    check out Flask_Blog for reference
    
*****  request.data
    for getting data type, exemple:
    data_string = request.data
    data_dictionary = json.loads(data_strings)
    !! learn how to use this, as this is the modern way!!
    
***** Data request
# Are either synchronous or asynchronous(async)
        -async: data sent to server and back without user needing to refresh
        -Async request(Ajax request) use the Fetch method
        
# this is what a fetch() request to a server may lokk
    fetch('url', {
        method: 'Post',
        body: JSON.stringify({
            'description: 'some description'
        }),
        headers: {
            'Content-Type': 'application/json'
        }
    })
    
***** learn more about flask-cors for security
# using app.after_request(), for flask-cors
# handling different methods
    GET with parameters and pagination, POST, PATCH, DELETE
    Basic error handling(abort)
# using app.errorhandler()
    takes a status code, and you shoul return parseble data to the client (json)
    
***** API testing
# create a unittest.Testcase object, to test all your functionality at once.
    !dont forget to define a teardown methode, to undo changes made by the test
# follow test-driven development(tdd) when writing APIs
    write test, fail test, write code, pass test, refactor. AND REPEAT!

_______________________________________________________________________
redirect and flash:
***** redirect
# it's like render_template(), but it redirect to a different route
    return redirect(url_for('FunctionAssociatedWithUrl'))

***** flash
# quick message box (like those error message you see when you enter wrong user info)
# inside you app file
    flash('message')

# inside your template
    {% with messages = get_flashed_messages(with_categories=true) %}
    --- the you want to loop through those messages and print them
    --- check layout.html


_______________________________________________________________________
Database with flask:
***** using simply flask
# you first want to import your db's api
# from dlask import g (g object help with managing db)

# in your app.config you want to put a db value(remember app.config is a dict)
    app.config.update(dict(DATABASE=<pathtodatabase>))
    or
    app.config['DATABASE'] = <pathtodatabase>

# now you just create a helper function that will do all for you
    # connect our database to the logic
    def get_db():
        """ Opens a new database connection if one does not exit for our current
        request context (the g objects helps with this task)"""

        if not hasattr(g, 'sqlite_db'):
            <dbAPI>.initDB()
            g.sqlite_db = dbname.db
        return g.sqlite_db


    @app.teardown_appcontext
    def close_db(error):
        """Closes the database again at the end of the request. Note the 'g'
        object which makes sure we only operate on the current request."""

        if hasattr(g, 'sqlite_db'):
            <dbAPI>.closeDB()

# now from your app.route functions you an call the dbAPI funtions and it should work 

***** using SQLAlchemy
# SQLAlchemy is a python package that let you interact with all types of sql bdms
# You pass it your db and it allows you to interact with your db.tables like they're a python class
# import SQLAlchemy
    from flask_sqlalchemy import SQLAlchemy

# specify the URI for our db
    sqlite:
        'sqlite:///<pathtodbfile>/dbname.db'
    mysql/mariadb/posgreSQL:
        'mysql://username:password@server/dbname'

# then initialise database
    db = SQLAlchemy(app)

# to create tables
    class User(db.Model):
        id = db.Column(db.Integer, primary_key=True)
        username = db.Column(db.String(20), unique=True, nullable=False)
        email = db.Column(db.String(120), unique=True, nullable=False)
        image_file = db.Column(db.String(20), nullable=False, default='default.jpg')
        password = db.Column(db.String(60), nullable=False)
        posts = db.relationship('Post', backref='author', lazy=True) # here we use uper case Post cause it's calling the Post class
        # this will allow use to see all the post by a user

        def __repr__(self):
            return f"User('{self.username}', '{self.email}', '{self.image_file}')" # what is return when table is called


    class Post(db.Model):
        id = db.Column(db.Integer, primary_key=True)
        title = db.Column(db.String(100), nullable=False)
        date_posted = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
        content = db.Column(db.Text, nullable=False)
        user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False) # here we use lower case user cause it's a query

        def __repr__(self):
            return f"Post('{self.title}', '{self.date_posted}')"

# sqlalchemy data types
    Integer, String(size), Text, DateTime, Float, Boolean, PickleType, LargeBinary
    
# once models are made, use create all to create those tables
    db.create_all()

# quering with SQLAlchemy
#now in our app.route functions we can work with the db object
# use session to add new objects into our db
    user_1 = User(username='Jon doe', email='jdoe@gmail.com', password='password')
    db.session.add(user_1)
    
# at this stage changes are not commited yet, we we can undo it
    session.rollback()

# when we finish making change, we must commit for it to take effect
    db.session.commit()

# quering exemples
User.query.all()
User.query.filter_by(username='Joelly').all()
User.query.filter_by(username='Joelly').delete()
User.query.count()
User.query.join('shdihds')
User.query.get(ID)
user = User.query.filter_by(username='Joelly').first()
print(user)
 >> User('Joelly', 'j.ekomalet@gmail.com', 'default.jpg')
user.id
user.email
user = user.query.get(1)
print(user)
 >> User('Joelly', 'j.ekomalet@gmail.com', 'default.jpg')
user.posts

# if they are from different models
    session.query(User).join(Posts)
# you can chain the commands
    User.query
        .filter_by(username='Joelly')
        .filter_by(email='jknasjk')
        .first()

***** migrations, besically git for our database schema.
    - db migrate - vreate a new script template to fill out
    - db upgrade - apply unappliend migrations
    - db downgrade - rollback applied migrations
# For flask we will use Flask-Migrate for our migration manager for migrating SQLAlchemist-based database changes
# Flask-Script to run migration scripts we defined from the terminal
! read the docs: https://flask-migrate.readthedocs.io
                             https://alembic.sqlalchemy.org 
# using Flask-Migrate
    -after setting up the migration manager, create your initial migration
    -everytime you delete or make change to the database(sqlalchemy model), run flask db migrate(it works like git add)
    -if you are happy with the change run flask db upgrade(or rollback if unhappy)
# we dont have to call db.session.create_all() anymore

***** pagination
# when displaying Data, we don't want to display everything in a single page, so we paginate them.
    page = request.args.get('page', 1, type=int) #taking the wanted page from uri
    model =  Model.query.order_by(Model.something.desc()).paginate(page=page, per_page=5) # loading a specific page and displaying 5 object by page
    
# to display page selection(at the bottom of a website), check out flaskblog/templates/home.html
_______________________________________________________________________
Packaging your projects:
***** why package your flask projects
# in order to avoid circular import errors, that happens when
the main.py, imports from a file that import a value from main.py,
before the main.py runs completely.

# put all our codes inside a package inside our folder.
In the packages __init__.py file, initialize our database, import the main app and routes.

_______________________________________________________________________
User authentications
***** hashing password
# using bcrypt, it encryptes into bytes wich is why we decode it into strings
    hashed_pw = bcrypt.generate_password_hash(form.password.data).decode('utf-8')

# check if password match encrypted password
    bcrypt.check_password_hash(user.password, form.password.data)
    bcrypt.check_password_hash(hashed_pw, 'password123')

***** authentications using flask_login
# use login mnager from flask_login, inside our __init__ file
    from flask_login import LoginManager

    login_manager = LoginManager(app) # it takes in the instase of our flask_app
    login_manager.login_view = 'login'
    login_manager.login_message_category = "info"

# now inside routes.py
    from flask_login import login_user, current_user, logout_user, login_required

# we want to login user
    user = User.query.filter_by(email=form.email.data).first() # check if username exist in database
    if user and bcrypt.check_password_hash(user.password, form.password.data): # chack that password match the one in database
        login_user(user, remember=form.remember.data) # login user


# current_user object allow us access to user info and status
    current_user.is_authenticated


# to logout
    logout_user() # no need to pass anything

# to block guest from accessing links that requires authentication, use the login_required operators before the route
    @login_required
    def account('/account'):
    
_______________________________________________________________________
Password reset
***** using email
# create a function in user model that generates a token

# create a route for requeast to reset password
    - check if inputed email address is related to an account
    - call a funtion that send a link with the token to the email adress
  
# create a route reseting password
    - takes a request(the only way to access this route with the correct token is by clicking the emailed link)
    - verify token is legit
    -update password for that user in the database
